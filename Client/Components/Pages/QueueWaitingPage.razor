@page "/queue-waiting"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IQueueManager QueueManager
@using System.Security.Claims
@using Client.MyAccount
@using Client.Queue
@using Contracts.ApiContracts.Queue.Requests
@using Contracts.QueueContracts
@using Contracts.QueueContracts.RocketLeague

<MudGrid>
    <MudItem xs="12" Class="px-10 py-5">
        <MudCard Elevation="10" Class="mx-auto pa-10 px-3 mt-10 rounded-xl ">
            <MudGrid>
                <MudItem xs="12" Class="d-flex justify-center flex-grow-1 gap-4 " Style="position: relative;"><MudText Typo="Typo.h2"><b>WAITING IN QUEUE</b></MudText></MudItem>
             
                <MudItem xs="12" Class="d-flex justify-center flex-grow-1 gap-4 " Style="position: relative;">
                                        
                    <MudOverlay Visible="true" Absolute="true">                                             
                        <MudText Typo="Typo.h5" ><b>TIMES OUT IN: </b></MudText>
                        <MudText Typo="Typo.button" Color="Color.Secondary"><p><b>@minutesLeft MINUTES @secondsLeft SECONDS</b></p></MudText>
                        </MudOverlay>

                    <MudProgressCircular Color="Color.Secondary" Value="@Value" Style="height:300px;width:300px;" />


                </MudItem>

            </MudGrid>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }


    public int Value { get; set; }

    int secondsLeft = 0;
    int minutesLeft = 0;

    private void UpdateMinutesLeft()
    {      
        if (QueueManager.JoinedQueueDate is not null)
        {
            var joinedDate = QueueManager.JoinedQueueDate.Value;
            minutesLeft = RequestLifetime.LifetimeMinutes - DateTime.UtcNow.Subtract(joinedDate).Minutes - 1;
            return;
        }

        minutesLeft = 0;
    }

    private void UpdateSecondsLeft()
    {

        if (QueueManager.JoinedQueueDate is not null)
        {
            var joinedDate = QueueManager.JoinedQueueDate.Value;
            secondsLeft = 60 - DateTime.UtcNow.Subtract(joinedDate).Seconds;
            return;
        }

        secondsLeft = 0;
    }

    private async void UpdateTime()
    { 
        while (QueueManager.JoinedQueueDate is not null)
        {
            await Task.Delay(1000);
            UpdateMinutesLeft();
            UpdateSecondsLeft();
        }
        
    }

    public async void LunchLoading()
    {
        Value = 1;
        do
        {
            Value += 1;
            StateHasChanged();
            await Task.Delay(200);

        } while (Value < 100);

        LunchLoading();
    }




    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        if (!authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }

        if (QueueManager.queueStatus == QueueStatus.LeftQueue)
        {
            NavigationManager.NavigateTo("/queue-page");
        }

        if (QueueManager.queueStatus == QueueStatus.JoinedLobby)
        {
            NavigationManager.NavigateTo("/lobby");
        }

        LunchLoading();
        UpdateTime();
    }
}
