@page "/lobby"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IQueueManager QueueManager
@inject IRocketLeagueLobbyManager LobbyManager
@using System.Security.Claims
@using Client.Lobby
@using Client.MyAccount
@using Client.Queue
@using Contracts.ApiContracts.Lobby.RocketLeague
@using Contracts.ApiContracts.Queue.Requests
@using Contracts.Common
@using Contracts.LobbyContracts
@using Contracts.QueueContracts
@using Contracts.QueueContracts.RocketLeague
<MudCard Elevation="10" Class=" pa-5 mt-10 mx-5 rounded-xl">
<MudGrid>
    @if (secondsLeft > 0 || minutesLeft > 0)
        {
    <MudItem xs="12" Class="pt-10 d-flex justify-center flex-grow-1 gap-4">
        
            <MudText Typo="Typo.h2"><b>LOBBY DURATION TIME:</b></MudText>
        
    </MudItem>
    <MudItem xs="12" Class="d-flex justify-center flex-grow-1 gap-4 " Style="position: relative;">
        
            <MudText Color="Color.Primary" Typo="Typo.h3"><b>@minutesLeft MINUTES @secondsLeft SECONDS </b></MudText>
        
    </MudItem>
    }
</MudGrid>
</MudCard>
<MudGrid>   
    @if (player1 is not null)
    {
        <MudItem sm="12" lg="@cardSize" Class="pa-10">
            <MudCard Elevation="10" Class="mx-auto pa-10 px-3 mt-10 rounded-xl ">

                <MudText Typo="Typo.h3"><b>PLAYER 1</b></MudText>
                <MudDivider></MudDivider>
                
                <MudItem xs="12" Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-8">
                    <MudAvatar Elevation="4" Style="width: 150px; height: 150px;" Color="Color.Primary">
                        <MudText Class="mt-2" Typo="Typo.h1" Color="Color.Dark"><b>@player1.UserAccountName[0].ToString()</b></MudText>
                    </MudAvatar>
                </MudItem>
                <MudItem xs="12" Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-2">
                    <MudText Typo="Typo.h2"><b>@player1.UserAccountName</b></MudText>
                    </MudItem>
                <MudItem xs="12">
                    
                    <MudText Class="mt-4" Typo="Typo.body1"><b>DISCORD NAME: </b></MudText>

                    <MudPaper Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-4 mud-theme-primary" Style=" width: 100%; height: 60px;">
                        <b>@player1.DiscordName</b>
                    </MudPaper>

                    <MudText Class="mt-4" Typo="Typo.body1"><b>STEAM PROFILE: </b></MudText>

                    <MudPaper Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-4 mud-theme-primary" Style=" width: 100%; height: 60px;">
                        <b>@player1.UserAccountSteamProfileLink</b>
                    </MudPaper>

                    <MudText Class="mt-4" Typo="Typo.body1"><b>EPIC NAME: </b></MudText>

                    <MudPaper Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-4 mud-theme-primary" Style=" width: 100%; height: 60px;">
                        <b>@player1.EpicName</b>
                    </MudPaper>
                    
                </MudItem>

            </MudCard>
        </MudItem>
    }
    @if (player2 is not null)
    {
        <MudItem sm="12" lg="@cardSize" Class="pa-10">
            <MudCard Elevation="10" Class="mx-auto pa-10 px-3 mt-10 rounded-xl ">

                <MudText Typo="Typo.h3"><b>PLAYER 2</b></MudText>
                <MudDivider></MudDivider>

                <MudItem xs="12" Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-8">
                    <MudAvatar Elevation="4" Style="width: 150px; height: 150px;" Color="Color.Primary">
                        <MudText Class="mt-2" Typo="Typo.h1" Color="Color.Dark"><b>@player2.UserAccountName[0].ToString()</b></MudText>
                    </MudAvatar>
                </MudItem>
                <MudItem xs="12" Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-2">
                    <MudText Typo="Typo.h2"><b>@player2.UserAccountName</b></MudText>
                </MudItem>
                <MudItem xs="12">

                    <MudText Class="mt-4" Typo="Typo.body1"><b>DISCORD NAME: </b></MudText>

                    <MudPaper  Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-4 mud-theme-primary" Style=" width: 100%; height: 60px;">
                        <b>@player2.DiscordName</b>
                    </MudPaper>

                    <MudText Class="mt-4" Typo="Typo.body1"><b>STEAM PROFILE: </b></MudText>

                    <MudPaper  Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-4 mud-theme-primary" Style=" width: 100%; height: 60px;">
                        <b>@player2.UserAccountSteamProfileLink</b>
                    </MudPaper>

                    <MudText Class="mt-4" Typo="Typo.body1"><b>EPIC NAME: </b></MudText>

                    <MudPaper Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-4 mud-theme-primary" Style=" width: 100%; height: 60px;">
                        <b>@player2.EpicName</b>
                    </MudPaper>

                </MudItem>

            </MudCard>
        </MudItem>
    }

    @if (player3 is not null)
    {
        <MudItem sm="12" lg="@cardSize" Class="pa-10">
            <MudCard Elevation="10" Class="mx-auto pa-10 px-3 mt-10 rounded-xl ">

                <MudText Typo="Typo.h3"><b>PLAYER 3</b></MudText>
                <MudDivider></MudDivider>

                <MudItem xs="12" Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-8">
                    <MudAvatar Elevation="4" Style="width: 150px; height: 150px;" Color="Color.Primary">
                        <MudText Class="mt-2" Typo="Typo.h1" Color="Color.Dark"><b>@player3.UserAccountName[0].ToString()</b></MudText>
                    </MudAvatar>
                </MudItem>
                <MudItem xs="12" Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-2">
                    <MudText Typo="Typo.h2"><b>@player3.UserAccountName</b></MudText>
                </MudItem>
                <MudItem xs="12">

                    <MudText Class="mt-4" Typo="Typo.body1"><b>DISCORD NAME: </b></MudText>

                    <MudPaper Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-4 mud-theme-primary" Style=" width: 100%; height: 60px;">
                        <b>@player3.DiscordName</b>
                    </MudPaper>

                    <MudText Class="mt-4" Typo="Typo.body1"><b>STEAM PROFILE: </b></MudText>

                    <MudPaper Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-4 mud-theme-primary" Style=" width: 100%; height: 60px;">
                        <b>@player3.UserAccountSteamProfileLink</b>
                    </MudPaper>

                    <MudText Class="mt-4" Typo="Typo.body1"><b>EPIC NAME: </b></MudText>

                    <MudPaper Class="d-flex align-center justify-center flex-grow-1 gap-4 mt-4 mud-theme-primary" Style=" width: 100%; height: 60px;">
                        <b>@player3.EpicName</b>
                    </MudPaper>

                </MudItem>

            </MudCard>
        </MudItem>
    }


</MudGrid>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }
    RocketLeaguePlayerDto? player1;
    RocketLeaguePlayerDto? player2;
    RocketLeaguePlayerDto? player3;
    RocketLeague2vs2LobbyResponse? rocketLeague2Vs2LobbyResponse;
    RocketLeague3vs3LobbyResponse? rocketLeague3Vs3LobbyResponse;

    int secondsLeft;
    int minutesLeft;

    private void UpdateMinutesLeft()
    {
        if (rocketLeague2Vs2LobbyResponse is not null)
        {
            minutesLeft = LobbyLifetime.LifetimeMinutes - DateTime.UtcNow.Subtract(rocketLeague2Vs2LobbyResponse.CreationDate).Minutes - 1;
            return;
        }

        if (rocketLeague3Vs3LobbyResponse is not null)
        {
            minutesLeft = LobbyLifetime.LifetimeMinutes - DateTime.UtcNow.Subtract(rocketLeague3Vs3LobbyResponse.CreationDate).Minutes - 1;
            return;
        }


        minutesLeft = 0;
    }

    private void UpdateSecondsLeft()
    {
        if (rocketLeague2Vs2LobbyResponse is not null)
        {
            secondsLeft = 60 - DateTime.UtcNow.Subtract(rocketLeague2Vs2LobbyResponse.CreationDate).Seconds;
            return;
        }


        if (rocketLeague3Vs3LobbyResponse is not null)
        {
            secondsLeft = 60 - DateTime.UtcNow.Subtract(rocketLeague3Vs3LobbyResponse.CreationDate).Seconds;
            return;
        }
        

        secondsLeft = 0;
    }

    private async void UpdateTime()
    {
        while (rocketLeague2Vs2LobbyResponse is not null ||
        rocketLeague3Vs3LobbyResponse is not null)
        {
            await Task.Delay(1000);
            UpdateMinutesLeft();
            UpdateSecondsLeft();
            StateHasChanged();
        }

    }

    private int cardSize
    => player3 is null ? player2 is null? 12 : 6 : 4;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        if (!authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }

        if (QueueManager.queueStatus == QueueStatus.LeftQueue)
        {
            NavigationManager.NavigateTo("/queue-page");
        }

        if (QueueManager.queueStatus == QueueStatus.JoinedQueue)
        {
            NavigationManager.NavigateTo("/queue-waiting");
        }

        await LobbyManager.UpdateLobbyStatus();
        rocketLeague2Vs2LobbyResponse = LobbyManager.GetUser2vs2Lobby();
        rocketLeague3Vs3LobbyResponse = LobbyManager.GetUser3vs3Lobby();

        if (rocketLeague2Vs2LobbyResponse is not null)
        {
            player1 = rocketLeague2Vs2LobbyResponse.Player1;
            player2 = rocketLeague2Vs2LobbyResponse.Player2;
        }

        if (rocketLeague3Vs3LobbyResponse is not null)
        {
            player1 = rocketLeague3Vs3LobbyResponse.Player1;
            player2 = rocketLeague3Vs3LobbyResponse.Player2;
            player3 = rocketLeague3Vs3LobbyResponse.Player3;
        }

        UpdateTime();
    }
}