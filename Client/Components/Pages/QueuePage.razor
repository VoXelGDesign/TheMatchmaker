@page "/queue-page"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IQueueManager QueueManager
@inject ISnackbar Snackbar
@using System.Security.Claims
@using Client.MyAccount
@using Client.Queue
@using Contracts.ApiContracts.Queue.Requests
@using Contracts.QueueContracts
@using Contracts.QueueContracts.RocketLeague
@using Contracts.QueueContracts.RocketLeague.Ranks

<MudGrid>
    <MudItem xs="12" Class="px-10 py-5">
        <MudCard Elevation="10" Class="mx-auto pa-10 px-3 mt-10 rounded-xl ">
            <MudGrid>

                <MudItem xs="12">
                    <MudText Color="Color.Primary">Select mode: </MudText>
                    <MudSelect @bind-Value="mode" Label="Select Mode" HelperText="ex. 2 vs 2" Placeholder="Please Select Mode" AdornmentIcon="@Icons.Material.Filled.BarChart" AdornmentColor="Color.Primary">
                        <MudSelectItem Value="@(RocketLeagueQueueMode.TwoVSTwo)">2 vs 2</MudSelectItem>
                        <MudSelectItem Value="@(RocketLeagueQueueMode.ThreeVSThree)">3 vs 3</MudSelectItem>
                    </MudSelect>
                    <MudSelect @bind-Value="region" Label="Select Your Language" HelperText="ex. Bronze" Placeholder="Please Select Lower Bound Rank Name" AdornmentIcon="@Icons.Material.Filled.BarChart" AdornmentColor="Color.Secondary">
                        @foreach (QueueRegion item in Enum.GetValues(typeof(QueueRegion)))
                        {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudText Color="Color.Secondary">Set Lower Bound Rank: </MudText>
                    <MudSelect @bind-Value="lowerBound.RocketLeagueRankName" Label="Select Your Lower Bound Rank Name" HelperText="ex. Bronze" Placeholder="Please Select Lower Bound Rank Name" AdornmentIcon="@Icons.Material.Filled.BarChart" AdornmentColor="Color.Secondary">
                        @foreach (QueueRocketLeagueRankName item in Enum.GetValues(typeof(QueueRocketLeagueRankName)))
                        {
                            if (upperBound.RocketLeagueRankName >= item)
                            {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    @if (lowerBound.RocketLeagueRankName != QueueRocketLeagueRankName.SUPERSONICLEGEND)
                    {
                        <MudSelect @bind-Value="lowerBound.RocketLeagueRankNumber" Label="Select Your Lower Bound Rank Number" HelperText="ex. I" Placeholder="Please Select Lower Bound Rank Number" AdornmentIcon="@Icons.Material.Filled.BarChart" AdornmentColor="Color.Secondary">

                            @foreach (QueueRocketLeagueRankNumber item in Enum.GetValues(typeof(QueueRocketLeagueRankNumber)))
                            {
                                if (item != QueueRocketLeagueRankNumber.NONE && (upperBound.RocketLeagueRankNumber >= item || upperBound.RocketLeagueRankName > lowerBound.RocketLeagueRankName))
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            }

                        </MudSelect>
                        <MudSelect @bind-Value="lowerBound.RocketLeagueDivision" Label="Select Your Lower Bound Rank Division" HelperText="ex. IV" Placeholder="Please Select Lower Bound Rank Division" AdornmentIcon="@Icons.Material.Filled.BarChart" AdornmentColor="Color.Secondary">

                            @foreach (QueueRocketLeagueDivision item in Enum.GetValues(typeof(QueueRocketLeagueDivision)))
                            {
                                if (item != QueueRocketLeagueDivision.NONE && (upperBound.RocketLeagueDivision >= item || upperBound.RocketLeagueRankName > lowerBound.RocketLeagueRankName))
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            }

                        </MudSelect>
                    }
                </MudItem>

                @if (lowerBound.RocketLeagueRankName != QueueRocketLeagueRankName.SUPERSONICLEGEND)
                {
                    <MudItem xs="12" md="6">
                        <MudText Color="Color.Secondary">Set upper bound  rank: </MudText>
                        <MudSelect @bind-Value="upperBound.RocketLeagueRankName" Label="Select Your Lower Bound Rank Name" HelperText="ex. Bronze" Placeholder="Please Select Lower Bound Rank Name" AdornmentIcon="@Icons.Material.Filled.BarChart" AdornmentColor="Color.Secondary">
                            @foreach (QueueRocketLeagueRankName item in Enum.GetValues(typeof(QueueRocketLeagueRankName)))
                            {
                                if (lowerBound.RocketLeagueRankName <= item)
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            }
                        </MudSelect>
                        @if (upperBound.RocketLeagueRankName != QueueRocketLeagueRankName.SUPERSONICLEGEND)
                        {
                            <MudSelect @bind-Value="upperBound.RocketLeagueRankNumber" Label="Select Your Lower Bound Rank Number" HelperText="ex. I" Placeholder="Please Select Lower Bound Rank Number" AdornmentIcon="@Icons.Material.Filled.BarChart" AdornmentColor="Color.Secondary">

                                @foreach (QueueRocketLeagueRankNumber item in Enum.GetValues(typeof(QueueRocketLeagueRankNumber)))
                                {
                                    if (item != QueueRocketLeagueRankNumber.NONE && (lowerBound.RocketLeagueRankNumber <= item || upperBound.RocketLeagueRankName < lowerBound.RocketLeagueRankName))
                                    {
                                        <MudSelectItem Value="@item">@item</MudSelectItem>
                                    }                                  
                                }

                            </MudSelect>
                            <MudSelect @bind-Value="upperBound.RocketLeagueDivision" Label="Select Your Lower Bound Rank Division" HelperText="ex. IV" Placeholder="Please Select Lower Bound Rank Division" AdornmentIcon="@Icons.Material.Filled.BarChart" AdornmentColor="Color.Secondary">

                                @foreach (QueueRocketLeagueDivision item in Enum.GetValues(typeof(QueueRocketLeagueDivision)))
                                {
                                    if (item != QueueRocketLeagueDivision.NONE && (lowerBound.RocketLeagueDivision <= item || upperBound.RocketLeagueRankName < lowerBound.RocketLeagueRankName))
                                    {
                                        <MudSelectItem Value="@item">@item</MudSelectItem>
                                    }
                                }

                            </MudSelect>
                        }
                    </MudItem>
                }
                <MudItem xs="12" Class="d-flex justify-center flex-grow-1 gap-4 " Style="position: relative;">

                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="height:60px;width:120px;" OnClick="@SendQueueRequest">JOIN QUEUE</MudButton>

                </MudItem>


            </MudGrid>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    private QueueRegion region { get; set; }

    private QueueRocketLeagueRank lowerBound = new()
    {
        RocketLeagueRankName = QueueRocketLeagueRankName.BRONZE,
        RocketLeagueDivision = QueueRocketLeagueDivision.I,
        RocketLeagueRankNumber = QueueRocketLeagueRankNumber.I
    };
    private QueueRocketLeagueRank upperBound = new()
        {
            RocketLeagueRankName = QueueRocketLeagueRankName.SUPERSONICLEGEND
        };


    bool joinedQueue = false;
    RocketLeagueQueueMode mode = RocketLeagueQueueMode.TwoVSTwo;


    private QueueRocketLeagueRank CorrectRank(QueueRocketLeagueRank rank)
    {
        if (rank.RocketLeagueRankName == QueueRocketLeagueRankName.SUPERSONICLEGEND)
        {
            rank.RocketLeagueRankNumber = QueueRocketLeagueRankNumber.NONE;
            rank.RocketLeagueDivision = QueueRocketLeagueDivision.NONE;
        }

        return rank;
    }

    private async void SendQueueRequest()
    {

        if (lowerBound.RocketLeagueRankName == QueueRocketLeagueRankName.SUPERSONICLEGEND)
        {
            upperBound.RocketLeagueRankName = QueueRocketLeagueRankName.SUPERSONICLEGEND;
        }

        lowerBound = CorrectRank(lowerBound);
        upperBound = CorrectRank(upperBound);

        var lowerDto = new RocketLeagueRankDto(
            lowerBound.RocketLeagueRankName.ToString(),
            lowerBound.RocketLeagueRankNumber.ToString(),
            lowerBound.RocketLeagueDivision.ToString());

        var upperDto = new RocketLeagueRankDto(
                    upperBound.RocketLeagueRankName.ToString(),
                    upperBound.RocketLeagueRankNumber.ToString(),
                    upperBound.RocketLeagueDivision.ToString());

        var request = new QueueRocketLeagueRequest
            {
                Mode = mode.ToString(),
                LowerBound = lowerDto,
                UpperBound = upperDto,
                QueueRegion = region
            };


        var resultSuccesful = await QueueManager.JoinQueue(request);

        if (!resultSuccesful)
            Snackbar.Add("Cannot join queue! Check if sesecary account info is provided.", MudBlazor.Severity.Error);
    }




    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        QueueManager.UpdateQueueStatus();

        if (!authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }

        if (QueueManager.queueStatus == QueueStatus.JoinedQueue)
        {
            NavigationManager.NavigateTo("/queue-waiting");
        }

        if (QueueManager.queueStatus == QueueStatus.JoinedLobby)
        {
            NavigationManager.NavigateTo("/lobby");
        }

    }
}
