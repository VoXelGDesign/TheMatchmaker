@page "/register"
@using Client.Identity
@inject IAccountManagement Acct
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>



<AuthorizeView>
    <Authorized>

    </Authorized>
    <NotAuthorized>


        <MudCard Elevation="5" Class="mx-auto pa-10 mt-10 rounded-xl" Style="width: 40%; min-width: 300px;">
            <MudCardHeader ><h1>Create new account.</h1></MudCardHeader>
            <MudForm Model="@model" @ref="@form" Validation="@(registerValidator.ValidateValue)" ValidationDelay="0">
                <MudCardContent>


                    <MudTextField @bind-Value="model.Email"
                                  For="@(() => model.Email)"
                                  Immediate="true"
                                  Label="Email" />

                    <MudTextField @bind-Value="model.Password"
                                  For="@(() => model.Password)"
                                  InputType="InputType.Password"
                                  Immediate="true"
                                  Label="Password" 
                                  HelperText="ex. johndoe@gmail.com"
                                  Variant="Variant.Filled"/>

                    <MudTextField @bind-Value="model.ConfirmPassword"
                                  For="@(() => model.ConfirmPassword)"
                                  InputType="InputType.Password"
                                  Immediate="true"
                                  Label="Confirm Password"
                                  HelperText="ex. Thematchmaker123!"
                                  Variant="Variant.Filled" />

                </MudCardContent>

            </MudForm>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">REGISTER</MudButton>
            </MudCardActions>
        </MudCard>

    </NotAuthorized>
</AuthorizeView>


@code {
    MudForm form;
    RegisterModelFluentValidator registerValidator = new();
    RegisterModel model = new();

    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }


    public record RegisterModel
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
        public string? ConfirmPassword { get; set; }
    }

    public class RegisterModelFluentValidator : AbstractValidator<RegisterModel>
    {
        public RegisterModelFluentValidator()
        {
            RuleFor(x => x.Email)
                .NotEmpty()
                .Length(1, 100)
                .EmailAddress()
                .WithMessage("Please enter correct email address");

            RuleFor(x => x.Password)
                .NotEmpty();

            RuleFor(x => x.Password)               
                .MinimumLength(8)
                .WithMessage("Password must be at least 8 characters long.")
                .Must(HaveAtLeastOneDigit)
                .WithMessage("Password must contain at least one digit.")
                .Must(HaveAtLeastOneLowercaseLetter)
                .WithMessage("Password must contain at least one lowercase letter.")
                .Must(HaveAtLeastOneUppercaseLetter)
                .WithMessage("Password must contain at least one uppercase letter.")
                .Must(HaveAtLeastOneUniqueNonAlphanumericCharacter)
                .WithMessage("Password must contain at least one unique non-alphanumeric character.");

            RuleFor(x => x.ConfirmPassword)
            .Equal(x => x.Password)
            .WithMessage("Passwords are different.");

            bool HaveAtLeastOneDigit(string password)
            {
                return password.Any(char.IsDigit);
            }

            bool HaveAtLeastOneLowercaseLetter(string password)
            {
                return password.Any(char.IsLower);
            }

            bool HaveAtLeastOneUppercaseLetter(string password)
            {
                return password.Any(char.IsUpper);
            }

            bool HaveAtLeastOneUniqueNonAlphanumericCharacter(string password)
            {
                var nonAlphanumericCharacters = password.Where(c => !char.IsLetterOrDigit(c)).Distinct();
                return nonAlphanumericCharacters.Count() >= 1;
            }

        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<RegisterModel>.CreateWithOptions((RegisterModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        if (authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task Submit()
    {
        await form.Validate();
        var result = await Acct.RegisterAsync(model.Email!, model.Password!);

        if (!form.IsValid)
        {
            Snackbar.Add("Form is not valid!", MudBlazor.Severity.Error);
            return;
        }

        if (!result.Succeeded)
        {
            Snackbar.Add("Registration failed!", MudBlazor.Severity.Error);
            return;
        }

        Snackbar.Add("Registered!", MudBlazor.Severity.Success);
    }



}