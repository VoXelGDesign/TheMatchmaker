@page "/login"
@using Client.Identity
@inject IAccountManagement Acct
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Login</PageTitle>

<MudGrid>

    <AuthorizeView>

        <Authorized>

        </Authorized>

        <NotAuthorized>

            <MudItem xs="12" Class="d-flex my-16 align-center justify-center flex-grow-1 gap-4">
                <MudCard Elevation="10" Class="my-16 pa-10 rounded-xl" Style=" max-width: 500px; min-width: 300px">
                    <MudCardHeader><h2>Login to your account.</h2></MudCardHeader>
                    <MudForm Model="@model" @ref="@form" Validation="@(loginValidator.ValidateValue)" ValidationDelay="0">
                        <MudCardContent>


                            <MudTextField @bind-Value="model.Email"
                                          For="@(() => model.Email)"
                                          Immediate="true"
                                          Label="Email"
                                          HelperText="ex. johndoe@gmail.com"
                                          Variant="Variant.Filled" />

                            <MudTextField @bind-Value="model.Password"
                                          For="@(() => model.Password)"
                                          InputType="InputType.Password"
                                          Immediate="true"
                                          Label="Password"
                                          HelperText="ex. Thematchmaker123!"
                                          Variant="Variant.Filled" />
                        </MudCardContent>

                    </MudForm>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">LOGIN</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </NotAuthorized>

    </AuthorizeView>

</MudGrid>

@code {
    MudForm form;
    LoginModelFluentValidator loginValidator = new();
    LoginModel model = new();

    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }


    public record LoginModel
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
    }

    public class LoginModelFluentValidator : AbstractValidator<LoginModel>
    {
        public LoginModelFluentValidator()
        {
            RuleFor(x => x.Email)
                .NotEmpty()
                .Length(1, 100)
                .Matches(@"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$")
                .WithMessage("Please enter correct email address");

            RuleFor(x => x.Password)
                .NotEmpty();

            RuleFor(x => x.Password)
                .MinimumLength(8)
                .WithMessage("Password must be at least 8 characters long.")
                .Must(HaveAtLeastOneDigit)
                .WithMessage("Password must contain at least one digit.")
                .Must(HaveAtLeastOneLowercaseLetter)
                .WithMessage("Password must contain at least one lowercase letter.")
                .Must(HaveAtLeastOneUppercaseLetter)
                .WithMessage("Password must contain at least one uppercase letter.")
                .Must(HaveAtLeastOneUniqueNonAlphanumericCharacter)
                .WithMessage("Password must contain at least one unique non-alphanumeric character.");

            bool HaveAtLeastOneDigit(string password)
            {
                return password.Any(char.IsDigit);
            }

            bool HaveAtLeastOneLowercaseLetter(string password)
            {
                return password.Any(char.IsLower);
            }

            bool HaveAtLeastOneUppercaseLetter(string password)
            {
                return password.Any(char.IsUpper);
            }

            bool HaveAtLeastOneUniqueNonAlphanumericCharacter(string password)
            {
                var nonAlphanumericCharacters = password.Where(c => !char.IsLetterOrDigit(c)).Distinct();
                return nonAlphanumericCharacters.Count() >= 1;
            }

        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<LoginModel>.CreateWithOptions((LoginModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        if (authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task Submit()
    {
        await form.Validate();
        var result = await Acct.LoginAsync(model.Email!, model.Password!);

        if (!form.IsValid)
        {
            Snackbar.Add("Form is not valid!", MudBlazor.Severity.Error);
            return;
        }

        if (!result.Succeeded)
        {
            Snackbar.Add("Login failed!", MudBlazor.Severity.Error);
            return;
        }
        
    }



}
